#!/usr/bin/env python
from __future__ import print_function

import pwn

pwn.context.terminal = "tmux splitw -h".split()
pwn.context.arch="amd64"

exe = pwn.context.binary = pwn.ELF('main.elf')
#libc = pwn.ELF("/lib/x86_64-linux-gnu/libc.so.6")
#system_offset = libc.sym['system']
#libc_start_main_offset = libc.sym['__libc_start_main']

flag = "SASD{D0n_t__w0rry___b3__angr_y!}"
r = pwn.process(["./main.elf", flag])
#r = pwn.gdb.debug("./main.elf", gdbscript="b* showChain\nc")

res = r.recv(timeout=60)
r.close()

def p(a):
  pass

if res.find("Win") != -1:
  print(flag)
else:
  import angr, claripy
  project = angr.Project("./main.elf")

  arg = claripy.BVS('arg', 8*32)
  initial_state = project.factory.entry_state(args=["./main.elf", arg])
  project.hook(0x401000, p, length=4)
  project.hook(0x401050, p, length=4)
  project.hook(0x4010F0, p, length=4)
  project.hook(0x401140, p, length=4)
  project.hook(0x405010, p, length=4)
  initial_state.add_constraints(arg.get_byte(0) == 'S')
  initial_state.add_constraints(arg.get_byte(1) == 'A')
  initial_state.add_constraints(arg.get_byte(2) == 'S')
  initial_state.add_constraints(arg.get_byte(3) == 'D')

  simulation = project.factory.simulation_manager(initial_state)

  print_good_address = 0x400000 + 0x4fe0
  simulation.explore(find=print_good_address)

  print(simulation)

  if simulation.found:
    solution_state = simulation.found[0]
    arg_eval = hex(solution_state.se.eval(arg))[2:]
    flag = "".join(chr(int(arg_eval[i:i+2], 16)) for i in range(0, len(arg_eval), 2))
    print(flag)
  else:
    print(simulation.errored)
    raise Exception('Could not find the solution')


f = open("./solution.txt", "w")
f.write(flag)
f.close()

